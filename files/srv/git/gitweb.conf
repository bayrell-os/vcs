use List::Util qw(min);
use DBI;

# директория где будут лежать наши репозитории
$projectroot = "/data/repo/git";

# путь до Git'a
$GIT = "/usr/bin/git";
$site_name = 'Git';

# видны только те репозитории, в которых есть файл 'git-daemon-export-ok'
# $export_ok = "git-daemon-export-ok"

# Friendly URL
$feature{'pathinfo'}{'default'} = [1];

$db_con = DBI->connect("dbi:SQLite:dbname=/data/db/vcs.db","","");
$db_con->{sqlite_unicode} = 1;

sub print_header {
    our $cgi;
    print $cgi->header(-type=>"text/html", -charset => 'utf-8', -status=>200);
}

sub print_env {
    foreach my $key (keys %ENV) {
        print $key . "=" . $ENV{$key} . "\n" ;
    }
}

sub out_deny
{
    my $res = "";
    $res .= "<div style='color: red; font-weight: bold; text-align: center; padding: 20px;'>";
    $res .= "Access Denied";
    $res .= "</div>";
    $res .= "<div style='text-align: center;'>";
    $res .= "<a href='" . $ENV{"HTTP_X_FORWARDED_PREFIX"} . "/'>[back]</a>";
    $res .= "</div>";
    our $cgi;
    print $cgi->header(-type=>"text/html", -charset => 'utf-8', -status=>403);
    print ($res);
    exit;
}


sub get_project
{
    my ( $project_name ) = @_;
    my $project = undef;
    
    $sql = "select * from projects
        where projects.type='git' and
            projects.name=:project_name and
            projects.is_deleted=0
    ";
    $query = $db_con->prepare($sql);
    
    $query->bind_param( ":project_name", $project_name );
    $query->execute();
    
    while ( $row = $query->fetchrow_hashref )
    {
        $project = $row;
    }
    
    $query -> finish;
    
    return $project;
}


sub get_user
{
    my ( $user_login ) = @_;
    my $user = undef;
    
    $sql = "select * from users
        where
            users.login=:user_login and
            users.banned=0 and
            users.is_deleted=0
    ";
    $query = $db_con->prepare($sql);
    
    $query->bind_param( ":user_login", $user_login );
    $query->execute();
    
    while ( $row = $query->fetchrow_hashref )
    {
        $user = $row;
    }
    
    $query -> finish;
    
    return $user;
}


sub find_project
{
    my ( $project_name ) = @_;
    
    if (length $project_name == 0)
    {
        return "";
    }
    
    my @project_name_arr = split(/\//, $project_name);
    if ($project_name_arr[0] eq "")
    {
        shift @project_name_arr;
    }
    
    my $project_name_arr_sz = scalar(@project_name_arr);
    for (my $i=min(3,$project_name_arr_sz); $i > 0; $i--)
    {
        my @arr = @project_name_arr[0 .. $i - 1];
        my $project_name = join '/', @arr;
        my $project = get_project($project_name);
        if (defined($project))
        {
            return $project_name;
        }
    }
    
    return "";
}


sub check_access_level
{
    my ( $user_login, $project_name ) = @_;
    
    my $user = get_user($user_login);
    if (!defined($user))
    {
        return 0;
    }
    
    $sql = "select
            projects.id as project_id,
            projects.type as project_type,
            projects.name as project_name,
            projects_users.name as user_name,
            projects_users.value as access_value
        
        from projects

        inner join projects_users on (projects_users.project_id=projects.id)

        where
            projects.type='git' and
            projects.name=:project_name and
            projects.is_deleted=0 and
            (projects_users.name in (

                select
                    '\@' || users_roles.name as group_name
                
                from users

                inner join users_in_roles on (users_in_roles.user_id=users.id)
                inner join users_roles on (users_in_roles.role_id=users_roles.id)

                where
                    users.login=:user_login
                
            ) or projects_users.name = :user_login or projects_users.name='\@all')

        order by projects_users.value asc;
    ";
    #print ($sql);
    $query = $db_con->prepare($sql);
    
    $query->bind_param( ":user_login", $user_login );
    $query->bind_param( ":project_name", $project_name );
    $query->execute();
    
    my $access_value = 0;
    while ( $row = $query->fetchrow_hashref )
    {
        $row_user_name = $row->{ "user_name" };
        $row_access_value = $row->{ "access_value" };
        
        if ($row_user_name eq $user_login)
        {
            $access_value = $row_access_value;
            last;
        }
        if ($row_access_value gt $access_value)
        {
            $access_value = $row_access_value;
        }
    }
    
    $query -> finish;
    
    return $access_value;
}


sub check_access
{
    my $git_repo_path = $projectroot;
    my $git_project_path = $ENV{"PATH_INFO"};
    my $user_login = $ENV{"HTTP_JWT_AUTH_USER"};
    
    my $project_name = find_project($git_project_path);
    my $access_level = check_access_level($user_login, $project_name);
    
    if ($access_level eq 0)
    {
        out_deny();
    }
}


check_access();
