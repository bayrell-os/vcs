#!/usr/bin/python3

import os, subprocess, sqlite3

BASE_DIR = os.path.dirname(__file__)
hgweb_config = "/srv/hg/hgweb.config"

db_con = sqlite3.connect('/data/db/vcs.db')
db_con.row_factory = sqlite3.Row


"""
    Get project by name
"""
def get_project(project_name):
    
    sql = """
        select * from projects
        where projects.type="git" and projects.name=:project_name and projects.is_deleted=0
    """
    
    cur = db_con.cursor()
    res = cur.execute(sql, {"project_name": project_name})
    project = res.fetchone();
    cur.close()
    
    return project;


"""
    Returns current project name
"""
def find_project(project_id):
    
    if len(project_name) == 0:
        return ""
    
    project_name_arr = project_name.split("/")
    
    if project_name_arr[0] == "":
        project_name_arr = project_name_arr[1:]
    
    for i in range(min(3, len(project_name_arr)), 0, -1):
        project_name = "/".join( project_name_arr[0: i] )
        project = get_project(project_name)
        if project is not None:
            return project_name
        
    return ""


"""
    Get user by name
"""
def get_user(user_login):
    
    sql = """
        select * from users
        where users.login=:user_login and users.banned=0 and users.is_deleted=0
    """
    
    cur = db_con.cursor()
    res = cur.execute(sql, {"user_login": user_login})
    user = res.fetchone();
    cur.close()
    
    return user;   


"""
    Check repository access level
    0 - access deny
    1 - read only
    2 - write
"""
def check_access_level(user_login, project_id):
    
    user = get_user(user_login)
    if user is None:
        return 0
    
    sql = """
        select
            projects.id as project_id,
            projects.type as project_type,
            projects.name as project_name,
            projects_users.name as user_name,
            projects_users.value as access_value
        
        from projects

        inner join projects_users on (projects_users.project_id=projects.id)

        where
            projects.type="git" and
            projects.id=:project_id and
            projects.is_deleted=0 and
            (projects_users.name in (

                select
                    "@" || users_roles.name as group_name
                
                from users

                inner join users_in_roles on (users_in_roles.user_id=users.id)
                inner join users_roles on (users_in_roles.role_id=users_roles.id)

                where
                    users.login=:user_login
                
            ) or projects_users.name = :user_login or projects_users.name="@all")

        order by projects_users.value asc;
    """
    
    cur = db_con.cursor()
    res = cur.execute(sql, {"user_login": user_login, "project_id": project_id})
    
    access_value = 0
    for row in res:
        
        if row["user_name"] == user_login:
            access_value = row["access_value"]
            break
        
        if row["access_value"] > access_value:
            access_value = row["access_value"]
    
    cur.close()
    
    return access_value


"""
    Core code
"""
git_project_path = os.getcwd()
git_repo_path = "/data/repo/id/"

if git_project_path[0:len(git_repo_path)] != "/data/repo/id/":
    print ("Error repo path")
    exit(1)

project_id = git_project_path[len(git_repo_path):]

user_login = os.getenv("HTTP_JWT_AUTH_USER")
access_level = check_access_level(user_login, project_id)

if access_level != 2:
    print ("Write access is denied")
    exit(1)

exit(0)